#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# create folders
mkdir -p \
    /app/www/public/config \
    /app/www/public/custom_apps \
    /app/www/public/themes \
    /config/www/nextcloud/config \
    /config/www/nextcloud/custom_apps \
    /config/www/nextcloud/themes \
    /data

# migrate legacy install (copy inside container)
if [ -f /config/www/nextcloud/version.php ]; then
    echo "Migrating legacy install"
    rsync -rlD --remove-source-files --exclude-from=/app/upgrade.exclude /config/www/nextcloud/ /app/www/public/
    rsync -rlD --remove-source-files --include '/version.php' --exclude '/*' /config/www/nextcloud/ /app/www/public/
    rm -rf /config/www/nextcloud/updater/
    find \
        /config/www/nextcloud/ \
        -type d -empty \
        ! -path "/config/www/nextcloud/config" \
        ! -path "/config/www/nextcloud/custom_apps" \
        ! -path "/config/www/nextcloud/themes" \
        -delete
    touch /tmp/full_chown
fi

# symlink config folders
for dir in config custom_apps themes; do
    if [ "$(readlink /app/www/public/${dir})" != "/config/www/nextcloud/${dir}" ]; then
        rm -rf "/app/www/public/${dir}"
        ln -s "/config/www/nextcloud/${dir}" "/app/www/public/${dir}"
    fi
done

# copy defaults
cp -n /defaults/config.php /app/www/public/config/config.php 2> >(grep -v 'cp: not replacing')
datadirectory=$(php -r "require '/app/www/public/config/config.php'; echo \$CONFIG['datadirectory'];" 2>/dev/null)

# symlink data folder
if [ "$(readlink /app/www/public/data)" != "${datadirectory}" ]; then
    rm -rf /app/www/public/data
    ln -s "${datadirectory}" /app/www/public/data
fi

# install app
vergte() { printf '%s\n%s' "${2}" "${1}" | sort -C -V; }
vergt() { ! vergte "${2}" "${1}"; }
verlte() { printf '%s\n%s' "${1}" "${2}" | sort -C -V; }
verlt() { ! verlte "${2}" "${1}"; }

installed_version="0.0.0.0"
if [ -f /app/www/public/version.php ]; then
    installed_version=$(php -r "require '/app/www/public/version.php'; echo implode('.', \$OC_Version);" 2>/dev/null)
fi
image_version=$(php -r "require '/app/www/src/version.php'; echo implode('.', \$OC_Version);" 2>/dev/null)

if vergt "${installed_version}" "${image_version}"; then
    echo "Can't start Nextcloud because the version of the data (${installed_version}) is higher than the docker image version (${image_version}) and downgrading is not supported. Are you sure you have pulled the newest image version?"
    sleep infinity
fi

if vergt "${image_version}" "${installed_version}"; then
    echo "Initializing nextcloud ${image_version} ..."
    if [ "${installed_version}" != "0.0.0.0" ]; then
        echo "Upgrading nextcloud from ${installed_version} ..."
        occ app:list | sed -n "/Enabled:/,/Disabled:/p" >/tmp/list_before
    fi

    rsync -rlD --exclude-from=/app/upgrade.exclude /app/www/src/ /app/www/public/
    for dir in config data custom_apps themes; do
        if [ -z "$(ls -A /app/www/public/${dir}/ 2>/dev/null)" ]; then
            rsync -rlD --include "/${dir}/*" --exclude '/*' /app/www/src/ /app/www/public/
        fi
    done
    rsync -rlD --include '/version.php' --exclude '/*' /app/www/src/ /app/www/public/

    touch /tmp/full_chown

    if [ "${installed_version}" = "0.0.0.0" ]; then
        # Install
        echo "New nextcloud instance"
        echo "Please run the web-based installer on first connect!"
    else
        # Upgrade
        occ upgrade

        occ app:list | sed -n "/Enabled:/,/Disabled:/p" >/tmp/list_after
        echo "The following apps have been disabled:"
        diff /tmp/list_before /tmp/list_after | grep '<' | cut -d- -f2 | cut -d: -f1
    fi

    rm -f /tmp/list_before /tmp/list_after
    echo "Initializing finished"
fi

if [ -f /tmp/full_chown ]; then
    echo "Setting permissions"
    lsiown abc:abc -R \
        /app/www/public \
        /config/www/nextcloud
    rm -f /tmp/full_chown
fi
lsiown abc:abc \
    /app/www/public \
    /app/www/public/config \
    /app/www/public/custom_apps \
    /app/www/public/data \
    /app/www/public/themes \
    /config/www/nextcloud \
    /config/www/nextcloud/config \
    /config/www/nextcloud/custom_apps \
    /config/www/nextcloud/themes \
    /data

# setup config
if ! occ config:system:get memcache.local >/dev/null 2>&1; then
    occ config:system:set memcache.local --value='\\OC\\Memcache\\APCu'
fi
if ! occ config:system:get memcache.distributed >/dev/null 2>&1; then
    occ config:system:set memcache.distributed --value='\\OC\\Memcache\\Memcached'
fi
if ! occ config:system:get datadirectory >/dev/null 2>&1; then
    occ config:system:set datadirectory --value='/data'
fi
if ! occ config:system:get apps_paths >/dev/null 2>&1 || ! occ config:system:get apps_paths | grep -q 'path: /app/www/public/apps' || ! occ config:system:get apps_paths | grep -q 'path: /app/www/public/custom_apps'; then
    occ config:import < <(echo '{"system":{"apps_paths":[{"path":"\/app\/www\/public\/apps","url":"\/apps","writable":false},{"path":"\/app\/www\/public\/custom_apps","url":"\/custom_apps","writable":true}]}}')
fi

if (occ app:list --no-interaction | grep -q richdocumentscode) 2>/dev/null; then
    echo "Removing CODE Server"
    APP=$(occ app:list --no-interaction | grep richdocumentscode | awk -F ' ' '{print $2}' | tr -d ':')
    occ app:remove --no-interaction "${APP}" 2>/dev/null
fi
